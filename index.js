import {refs} from './refs.js';
import {toggleFavorites} from './toggle.js';
 import { API_KEY, BASE_URL } from './Api_key.js';
 import{ handleDownloadButtonClick} from './download.js'
 import{updateFavoriteButtons} from './updateFavoriteButton.js';
 import {searchImages} from './searchImage.js';

refs.searchInput.addEventListener('keyup', searchImages);

window.addEventListener('DOMContentLoaded', () => {
    updateFavoriteButtons();
});

window.addEventListener('scroll', () => {
    if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 100) {
        loadMoreImages();
    }
});




export let myQuery = '';
export let page = 1;
export let total = 0;
export let totalHits = 0;
export let isFetching = false;
// let perPage = 40; 

console.log('Api_key.js :>> ', API_KEY);
console.log('BASE_URL :>> ', BASE_URL);
console.log('refs :>> ', refs);



export async function fetchArticles() {
    try {
        const perPage = 40; 
        const url = `${BASE_URL}?key=${API_KEY}&q=&image_type=photo&orientation=horizontal&safesearch=true&per_page=${perPage}&page=${page}`;
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const data = await response.json();
        total += data.hits.length;
        console.log(total);
        totalHits = data.totalHits;

        if (total >= totalHits) {
            console.log('You have reached the end of available images.')
            showAlert('You have reached the end of available images.');
        }

        return data;
    } catch (error) {
        showAlert('Sorry, an error occurred');
    }
}

function showAlert(message) {
    const alertContainer = document.getElementById('alert-container');
    console.log(alertContainer)
    const alert = document.createElement('div');
    console.log(alert)
    alert.classList.add('alert');
    alert.textContent = message || 'Sorry, an error occurred'; 
    alertContainer.appendChild(alert);
    setTimeout(() => {
        alert.remove();
    }, 5000);
}

export function createMarkup({ hits }) {
    if (!hits) {
        console.error('Hits are undefined');
        return; 
    }

    let favorites = JSON.parse(localStorage.getItem('favorites')) || [];
    if (!Array.isArray(favorites)) {
        favorites = [];
    }

    const markup = hits.map(({ id, webformatURL, tags, likes, views, comments, downloads }) => {
        const isFavorite = favorites.some(
            (favorite) => favorite.id === id 
        );

        const favoriteButtonText = isFavorite ? 'üíî' : '‚ù§Ô∏è';
  
        
        return `
        <div class="card-container">
            <div class="photo-card" data-id="${id}">
                <a href="${webformatURL}" class="image-link">
                    <div class="button-container">
                        <button class="toggle-favorite">
                            ${favoriteButtonText}
                        </button>
                        <button class="download-button" data-url="${webformatURL}" data-filename="${tags}.jpg"> 
                            ‚¨áÔ∏è
                        </button>
                    </div>
                    <img src="${webformatURL}" alt="${tags}" loading="lazy" />
                </a>
                <div class="info">
                    <p class="info-item"><b>Likes:<br>${likes}</b></p>
                    <p class="info-item"><b>Views:<br>${views}</b></p>
                    <p class="info-item"><b>Comments:<br>${comments}</b></p>
                    <p class="info-item"><b>Downloads:<br>${downloads}</b></p>
                </div>
            </div>
        </div>
        `;
    }).join('');

    refs.div.insertAdjacentHTML('beforeend', markup);

    // Add event listener to open modal
    const imageLinks = document.querySelectorAll('.image-link');
    imageLinks.forEach((link) => {
        link.addEventListener('click', openModal); // –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó openModal
    });

    // Add event listener to toggle favorite buttons
    const toggleFavoriteButtons = document.querySelectorAll('.toggle-favorite');
    toggleFavoriteButtons.forEach((button) => {
        button.addEventListener('click', toggleFavorites);
    });

    // Add event listener to download buttons
    const downloadButtons = document.querySelectorAll('.download-button');
    downloadButtons.forEach((button) => {
        button.addEventListener('click', handleDownloadButtonClick);
    });

    // Update favorite buttons
    updateFavoriteButtons();

    return markup;
}

function openModal(event) {
if (event.target.tagName !== 'IMG') {
    return;
}

    event.preventDefault();
    const imgSrc = event.currentTarget.querySelector('img').src;
    const modal = document.getElementById('myModal');
    const modalImg = document.getElementById('modalImage');
    modal.style.display = 'block';
    modalImg.src = imgSrc;
    document.body.classList.add('modal-open'); // –î–æ–¥–∞—Ç–∏ –∫–ª–∞—Å –¥–æ body
}

function closeModal() {
    const modal = document.getElementById('myModal');
    modal.style.display = 'none';
    document.body.classList.remove('modal-open'); // –í–∏–¥–∞–ª–∏—Ç–∏ –∫–ª–∞—Å –∑ body
}


document.querySelector('.close').addEventListener('click', closeModal);

window.addEventListener('click', (event) => {
    const modal = document.getElementById('myModal');
    if (event.target == modal) {
        closeModal();
    }
});


async function loadMoreImages() {
    if (!isFetching) { // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ –π–¥–µ –ø—Ä–æ—Ü–µ—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        isFetching = true; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å, —â–æ –π–¥–µ –ø—Ä–æ—Ü–µ—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        page++; // –ó–±—ñ–ª—å—à—É—î–º–æ –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–æ—Ä—Ü—ñ—ó –∫–∞—Ä—Ç–∏–Ω–æ–∫
        try {
            const data = await fetchArticles(); // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –Ω–æ–≤–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            if (!data || !data.hits) {
                // –Ø–∫—â–æ –¥–∞–Ω—ñ –∞–±–æ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å hits –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω—ñ, –≤–∏–π—Ç–∏ –∑ —Ñ—É–Ω–∫—Ü—ñ—ó
                return;
            }
            createMarkup(data); // –û–Ω–æ–≤–ª—é—î–º–æ –≤–º—ñ—Å—Ç —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ –Ω–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
        } catch (error) {
            console.error('Error loading more images:', error);
        } finally {
            isFetching = false; // –ó–±–∏—Ä–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        }
    }
}





fetchArticles().then(createMarkup);









// export async function fetchArticles() {
//     try {
//         const url = `https://pixabay.com/api/?key=12397794-3c79aefa4a299d9b97accc173&q=&image_type=photo&orientation=horizontal&safesearch=true&per_page=40&page=1`;
//         const response = await fetch(url);
//         if (!response.ok) {
//             throw new Error('Network response was not ok');
//         }
//         const data = await response.json();
//         total += data.hits.length;
//         console.log(total);
//         totalHits = data.totalHits;
//         return data;
//     } catch (error) {
//         alert('Sorry, an error occurred');
//     }
// }

// export async function fetchMoreArticles() {
//     try {
//         page++; // –ó–±—ñ–ª—å—à–∏—Ç–∏ –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏
//         const moreData = await fetchArticles();
//         totalHits = moreData.totalHits;

//         console.log("more art", moreData);
//         createMarkup(moreData);
//         if (total >= totalHits) {
//             alert('We`re sorry, but you`ve reached the end of search results.');
//         } else if (total === totalHits) {
//             alert('All images have been loaded.');
//         }
//     } catch (error) {
//         console.error('Error fetching more articles:', error);
//     }
// }
// export function handleScroll() {
//     const { scrollTop, scrollHeight, clientHeight } = document.documentElement;

//     // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –≤–∂–µ –∑–∞–ø–∏—Ç —Ç–∞ —á–∏ –ø—Ä–æ–∫—Ä—É—á–µ–Ω–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–æ—Å—Ç–∞—Ç–Ω—å–æ
//     if (!isFetching && (scrollTop + clientHeight >= scrollHeight * 0.9) && (scrollTop > 0)) {
//         // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ–ª–∞–≥ isFetching –≤ true, —â–æ–± –∑–∞–ø–æ–±—ñ–≥—Ç–∏ –ø–æ–¥–≤—ñ–π–Ω–æ–º—É –∑–∞–ø—É—Å–∫—É –∑–∞–ø–∏—Ç—É
//         isFetching = true;

//         // –ó–∞—Ç—Ä–∏–º—É—î–º–æ –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–∞ 500 –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ–∫—Ä—É—á—É–≤–∞–Ω–Ω—è
//         setTimeout(async () => {
//             // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Å—Ç–∞—Ç–µ–π
//             await fetchMoreArticles();

//             // –ü—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—è–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
//             if (total >= totalHits) {
//                 alert('We`re sorry, but you`ve reached the end of search results.');
//             } else if (total === totalHits) {
//                 alert('All images have been loaded.');
//             }

//             // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ñ–ª–∞–≥ isFetching –≤ false –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –∑–Ω–æ–≤—É –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
//             isFetching = false;
//         }, 500);
//     }
// }

// export async function searchImages() {
//     try {
//         // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –∑ –ø–æ–ª—è –≤–≤–æ–¥—É —Ç–∞ –æ–±—Ä—ñ–∑–∞—î–º–æ –π–æ–≥–æ
//         const searchQuery = refs.searchInput.value.trim();

//         // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç
//         if (searchQuery === '') {
//             fetchArticles().then(createMarkup); // –í–∏–∫–ª–∏–∫–∞—î–º–æ fetchArticles —Ç–∞ createMarkup
//             return;
//         }

//         // –°–∫–∏–¥—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è total –ø–µ—Ä–µ–¥ –Ω–æ–≤–∏–º –ø–æ—à—É–∫–æ–º
//         total = 0;

//         // –ë—É–¥—É—î–º–æ URL –¥–ª—è –∑–∞–ø–∏—Ç—É –¥–æ API
//         const url = `${BASE_URL}?key=${API_KEY}&q=${searchQuery}&image_type=photo&orientation=horizontal&safesearch=true&per_page=40&page=${page}`;

//         // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ API
//         const response = await fetch(url);
//         if (!response.ok) {
//             throw new Error('Network response was not ok');
//         }
        
//         // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
//         const data = await response.json();
        
//         // –î–æ–¥–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
//         total += data.hits.length;

//         // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
//         createMarkup(data);
//     } catch (error) {
//         console.error('Error searching images:', error);
//         alert('Sorry, an error occurred while searching for images');
//     }
// }











// export function displayFavoritesMarkup(markup) {
//     const favoritesContainer = document.getElementById('favorites-container');
//     favoritesContainer.innerHTML = markup;
// }

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É–ª—é–±–ª–µ–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å
// export async function renderFavorites() {
//     try {
//         // –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —É–ª—é–±–ª–µ–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
//         const favorites = JSON.parse(localStorage.getItem('favorites')) || [];

//         // –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ç–∫—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —É–ª—é–±–ª–µ–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
//         const markup = favorites.map(({ id, src, alt }) => {
//             return `
//                  <div class="photo-card" data-id="${id}">
//             <img src="${src}" alt="${alt}" loading="lazy" />
//             <div class="button-container">
//                 <button class="toggle-favorite">–í–∏–¥–∞–ª–∏—Ç–∏ –∑ —É–ª—é–±–ª–µ–Ω–æ–≥–æ</button>
//                 <button class="download-button">–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏</button>
//             </div>
//         </div>
//             `;
//         }).join('');

//         // –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ç–∫—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ Favorites
//         displayFavoritesMarkup(markup);

//         // –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–æ –∫–Ω–æ–ø–æ–∫ "–í–∏–¥–∞–ª–∏—Ç–∏ –∑ —É–ª—é–±–ª–µ–Ω–æ–≥–æ"
//         const toggleFavoriteButtons = document.querySelectorAll('.toggle-favorite');
//         toggleFavoriteButtons.forEach((button) => {
//             button.addEventListener('click', toggleFavorites);
//         });
//     } catch (error) {
//         console.error('Error rendering favorites:', error);
//     }
// }


// document.addEventListener('DOMContentLoaded', function() {
//     // Retrieve favorite images from local storage
//     const favorites = JSON.parse(localStorage.getItem('favorites')) || [];

//     // Render favorite images markup
//     createMarkup({ hits: favorites });
// });

